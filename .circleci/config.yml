jobs:
  build-branches-amd64-base-ubuntu20:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 ubuntu20 base container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -e OS=$OS20 -e VERSION=$K8S_VERSION -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:20.04 bash -c \
              'rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh "python python3-docker python3-chardet python3-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset" && \
               mkdir /root/debs/ubuntu20 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils gnupg1 gnupg2 && \
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add - && \
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg add - && \
               apt-get update && \
               /root/apt-download-without-version.sh "cri-o cri-o-runc podman" && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               ls /root/debs/ubuntu20/'
            docker build -t wise2c/apt-source:amd64-base20 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-base20

  build-tags-amd64-base-ubuntu20:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 ubuntu20 base container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -e OS=$OS20 -e VERSION=$K8S_VERSION -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:20.04 bash -c \
              'rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh "python python3-docker python3-chardet python3-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset" && \
               mkdir /root/debs/ubuntu20 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils gnupg1 gnupg2 && \
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add - && \
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg add - && \
               apt-get update && \
               /root/apt-download-without-version.sh "cri-o cri-o-runc podman" && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               ls /root/debs/ubuntu20/'
            docker build -t wise2c/apt-source:amd64-base20 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-base20

  build-branches-amd64-base-ubuntu22:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 ubuntu22 base container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -e OS=$OS22 -e VERSION=$K8S_VERSION -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:22.04 bash -c \
              'rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh "python3 python3-docker python3-chardet python3-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset" && \
               mkdir /root/debs/ubuntu22 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils gnupg1 gnupg2 && \
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add - && \
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg add - && \
               apt-get update && \
               /root/apt-download-without-version.sh "cri-o cri-o-runc podman" && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               ls /root/debs/ubuntu22 && \
               cd /root/debs/ubuntu22'
            docker build -t wise2c/apt-source:amd64-base22 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-base22

  build-tags-amd64-base-ubuntu22:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 ubuntu22 base container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -e OS=$OS22 -e VERSION=$K8S_VERSION -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:22.04 bash -c \
              'rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh "python3 python3-docker python3-chardet python3-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset" && \
               mkdir /root/debs/ubuntu22 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils gnupg1 gnupg2 && \
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add - && \
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg add - && \
               apt-get update && \
               /root/apt-download-without-version.sh "cri-o cri-o-runc podman" && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               ls /root/debs/ubuntu22 && \
               cd /root/debs/ubuntu22'
            docker build -t wise2c/apt-source:amd64-base22 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-base22

  build-branches-amd64-ceph-ubuntu20:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 ubuntu20 ceph container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:20.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' && \
               mkdir /root/debs/ubuntu20 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils && \
               curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - && \
               echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ focal main | tee /etc/apt/sources.list.d/ceph.list && \
               apt-get update && \
               /root/apt-download-without-version.sh 'ceph ceph-deploy ceph-mgr ceph-mds rbd-nbd rbd-mirror radosgw open-vm-tools' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               cd /root/debs/ubuntu20"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:amd64-ceph20 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-ceph20

  build-tags-amd64-ceph-ubuntu20:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 ubuntu20 ceph container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:20.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' && \
               mkdir /root/debs/ubuntu20 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils && \
               curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - && \
               echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ focal main | tee /etc/apt/sources.list.d/ceph.list && \
               apt-get update && \
               /root/apt-download-without-version.sh 'ceph ceph-deploy ceph-mgr ceph-mds rbd-nbd rbd-mirror radosgw open-vm-tools' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               cd /root/debs/ubuntu20"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:amd64-ceph20 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-ceph20

  build-branches-amd64-ceph-ubuntu22:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 ubuntu22 ceph container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:22.04 bash -c \
              "apt-get update && \
               /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' && \
               mkdir /root/debs/ubuntu22 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils && \
               curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - && \
               echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ jammy main | tee /etc/apt/sources.list.d/ceph.list && \
               apt-get update && \
               /root/apt-download-without-version.sh 'open-vm-tools' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:amd64-ceph22 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-ceph22

  build-tags-amd64-ceph-ubuntu22:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 ubuntu22 ceph container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:22.04 bash -c \
              "apt-get update && \
               /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' && \
               mkdir /root/debs/ubuntu22 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils && \
               curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - && \
               echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ jammy main | tee /etc/apt/sources.list.d/ceph.list && \
               apt-get update && \
               /root/apt-download-without-version.sh 'open-vm-tools' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:amd64-ceph22 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-ceph22

  build-branches-amd64-k8s-docker:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 k8s container image
          command: |
            docker run -itd --name=base20 wise2c/apt-source:amd64-base20
            docker cp base20:/usr/share/nginx/html/debs base20
            docker stop base20 && docker rm base20
            docker run -itd --name=base22 wise2c/apt-source:amd64-base22
            docker cp base22:/usr/share/nginx/html/debs base22
            docker stop base22 && docker rm base22
            docker run -itd --name=ceph20 wise2c/apt-source:amd64-ceph20
            docker cp ceph20:/usr/share/nginx/html/debs ceph20
            docker stop ceph20 && docker rm ceph20
            docker run -itd --name=ceph22 wise2c/apt-source:amd64-ceph22
            docker cp ceph22:/usr/share/nginx/html/debs ceph22
            docker stop ceph22 && docker rm ceph22
            mkdir -p ${PWD}/debs/ubuntu20
            mkdir -p ${PWD}/debs/ubuntu22
            mv base20/ubuntu20/*.deb ${PWD}/debs/ubuntu20/
            mv base22/ubuntu22/*.deb ${PWD}/debs/ubuntu22/
            mv ceph20/ubuntu20/*.deb ${PWD}/debs/ubuntu20/
            mv ceph22/ubuntu22/*.deb ${PWD}/debs/ubuntu22/
            sudo chmod +x ${PWD}/apt-download.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:20.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               echo 'apt-get updating...' && \
               apt-get update > build.log 2>&1 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 && \
               curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \
               add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable' && \
               cp /root/kubernetes.list /etc/apt/sources.list.d/ && \
               apt-get update > build.log 2>&1 && \
               /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu.20.04~focal docker-ce=${DOCKER_VERSION}~ubuntu.20.04~focal kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               rm -f /root/debs/ubuntu20/docker.io*.deb && \
               cd /root/debs/ubuntu20 && \
               apt-get download libseccomp2 && \
               echo '##### list docker and kubernetes packages begin #####' && \
               ls | grep -E 'docker|kube' && \
               echo '##### list docker and kubernetes packages end #####' && \
               apt-ftparchive packages . > Packages && \
               apt-ftparchive release . > Release"
               echo '###############################################################debug!!!!!!!!!!!!!!!!!!!!!!!!!!!!###########################################' && \
            docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:22.04 bash -c \
              "echo '###############################################################debug2222222222222222222222222222###########################################' && \
               echo 'apt-get updating...' && \
               apt-get update > build.log 2>&1 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 && \
               echo '###############################################################debug3333333333333333333333333333###########################################' && \
               curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg && \
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
               echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-jammy main" | tee /etc/apt/sources.list.d/kubernetes.list && \
               add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable' && \
               apt-get update > build.log 2>&1 && \
               /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu.22.04~jammy docker-ce=${DOCKER_VERSION}~ubuntu.22.04~jammy kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               rm -f /root/debs/ubuntu22/docker.io*.deb && \
               cd /root/debs/ubuntu22 && \
               apt-get download libseccomp2 libapt-pkg5.0 && \
               echo '##### list docker and kubernetes packages begin #####' && \
               ls | grep -E 'docker|kube' && \
               echo '##### list docker and kubernetes packages end #####' && \
               apt-ftparchive packages . > Packages && \
               apt-ftparchive release . > Release && \
               ls /root/debs/ubuntu22/Packages && \
               ls /root/debs/ubuntu22/Release && \
               apt-get install -y gnupg gnupg2 > build.log 2>&1 && \
               echo wise2cbreeze > ./breeze.key && \
               cp /root/breeze ./ && \
               gpg2 --batch --gen-key breeze && \
               gpg2 --no-default-keyring --secret-keyring ./breeze.sec --keyring ./breeze.pub --list-secret-keys && \
               gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release && \
               gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release && \
               cd /root/debs/ubuntu20 && \
               cp ../ubuntu22/breeze.pub ./ && \
               cp ../ubuntu22/breeze.key ./ && \
               gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release && \
               gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release && \
               rm -f ../ubuntu22/breeze && \
               rm -f ../ubuntu22/breeze.key && \
               rm -f ./breeze && \
               rm -f ./breeze.key"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:amd64-$CIRCLE_BRANCH .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-$CIRCLE_BRANCH

  build-tags-amd64-k8s-docker:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    machine: true
    steps:
      - checkout
      - run:
          name: Build an amd64 k8s container image
          command: |
            docker run -itd --name=base20 wise2c/apt-source:amd64-base20
            docker cp base20:/usr/share/nginx/html/debs base20
            docker stop base20 && docker rm base20
            docker run -itd --name=base22 wise2c/apt-source:amd64-base22
            docker cp base22:/usr/share/nginx/html/debs base22
            docker stop base22 && docker rm base22
            docker run -itd --name=ceph20 wise2c/apt-source:amd64-ceph20
            docker cp ceph20:/usr/share/nginx/html/debs ceph20
            docker stop ceph20 && docker rm ceph20
            docker run -itd --name=ceph22 wise2c/apt-source:amd64-ceph22
            docker cp ceph22:/usr/share/nginx/html/debs ceph22
            docker stop ceph22 && docker rm ceph22
            mkdir -p ${PWD}/debs/ubuntu20
            mkdir -p ${PWD}/debs/ubuntu22
            mv base20/ubuntu20/*.deb ${PWD}/debs/ubuntu20/
            mv base22/ubuntu22/*.deb ${PWD}/debs/ubuntu22/
            mv ceph20/ubuntu20/*.deb ${PWD}/debs/ubuntu20/
            mv ceph22/ubuntu22/*.deb ${PWD}/debs/ubuntu22/
            sudo chmod +x ${PWD}/apt-download.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:20.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               echo 'apt-get updating...' && \
               apt-get update > build.log 2>&1 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 && \
               curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \
               add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable' && \
               cp /root/kubernetes.list /etc/apt/sources.list.d/ && \
               apt-get update > build.log 2>&1 && \
               /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu.20.04~focal docker-ce=${DOCKER_VERSION}~ubuntu.20.04~focal kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               rm -f /root/debs/ubuntu20/docker.io*.deb && \
               cd /root/debs/ubuntu20 && \
               apt-get download libseccomp2 && \
               echo '##### list docker and kubernetes packages begin #####' && \
               ls | grep -E 'docker|kube' && \
               echo '##### list docker and kubernetes packages end #####' && \
               apt-ftparchive packages . > Packages && \
               apt-ftparchive release . > Release"
            docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:22.04 bash -c \
              "echo 'apt-get updating...' && \
               apt-get update > build.log 2>&1 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 && \
               curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg && \
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
               echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-jammy main" | tee /etc/apt/sources.list.d/kubernetes.list && \
               add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable' && \
               apt-get update > build.log 2>&1 && \
               /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu.22.04~jammy docker-ce=${DOCKER_VERSION}~ubuntu.22.04~jammy kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               rm -f /root/debs/ubuntu22/docker.io*.deb && \
               cd /root/debs/ubuntu22 && \
               apt-get download libseccomp2 libapt-pkg5.0 && \
               echo '##### list docker and kubernetes packages begin #####' && \
               ls | grep -E 'docker|kube' && \
               echo '##### list docker and kubernetes packages end #####' && \
               apt-ftparchive packages . > Packages && \
               apt-ftparchive release . > Release && \
               apt-get install -y gnupg gnupg2 > build.log 2>&1 && \
               echo wise2cbreeze > ./breeze.key && \
               cp /root/breeze ./ && \
               gpg2 --batch --gen-key breeze && \
               gpg2 --no-default-keyring --secret-keyring ./breeze.sec --keyring ./breeze.pub --list-secret-keys && \
               gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release && \
               gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release && \
               cd /root/debs/ubuntu20 && \
               cp ../ubuntu22/breeze.pub ./ && \
               cp ../ubuntu22/breeze.key ./ && \
               gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release && \
               gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release && \
               rm -f ../ubuntu22/breeze && \
               rm -f ../ubuntu22/breeze.key && \
               rm -f ./breeze && \
               rm -f ./breeze.key"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:amd64-$CIRCLE_TAG .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:amd64-$CIRCLE_TAG

  build-branches-aarch64-base-ubuntu20:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 ubuntu20 base container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -e OS=$OS20 -e VERSION=$K8S_VERSION -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:20.04 bash -c \
              'rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh "python3 python3-docker python3-chardet python3-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset" && \
               mkdir /root/debs/ubuntu20 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils gnupg1 gnupg2 && \
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add - && \
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg add - && \
               apt-get update && \
               /root/apt-download-without-version.sh "cri-o cri-o-runc podman" && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               ls /root/debs/ubuntu20/'
            docker build -t wise2c/apt-source:aarch64-base20 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-base20

  build-branches-aarch64-base-ubuntu22:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 ubuntu22 base container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -e OS=$OS22 -e VERSION=$K8S_VERSION -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:22.04 bash -c \
              'rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh "python3 python3-docker python3-chardet python3-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset" && \
               mkdir /root/debs/ubuntu22 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils gnupg1 gnupg2 && \
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add - && \
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg add - && \
               apt-get update && \
               /root/apt-download-without-version.sh "cri-o cri-o-runc podman" && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               ls /root/debs/ubuntu22/'
            docker build -t wise2c/apt-source:aarch64-base22 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-base22

  build-tags-aarch64-base-ubuntu20:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 ubuntu20 base container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -e OS=$OS20 -e VERSION=$K8S_VERSION -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:20.04 bash -c \
              'rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh "python python3-docker python3-chardet python3-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset" && \
               mkdir /root/debs/ubuntu20 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils gnupg1 gnupg2 && \
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add - && \
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg add - && \
               apt-get update && \
               /root/apt-download-without-version.sh "cri-o cri-o-runc podman" && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               ls /root/debs/ubuntu20/'
            docker build -t wise2c/apt-source:aarch64-base20 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-base20

  build-tags-aarch64-base-ubuntu22:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 ubuntu22 base container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -e OS=$OS22 -e VERSION=$K8S_VERSION -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:22.04 bash -c \
              'rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh "python3 python3-docker python3-chardet python3-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset" && \
               mkdir /root/debs/ubuntu22 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils gnupg1 gnupg2 && \
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable.list && \
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               cat /etc/apt/sources.list.d/devel-kubic-libcontainers-stable-cri-o.list && \
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add - && \
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg add - && \
               apt-get update && \
               /root/apt-download-without-version.sh "cri-o cri-o-runc podman" && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               ls /root/debs/ubuntu22/'
            docker build -t wise2c/apt-source:aarch64-base22 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-base22

  build-branches-aarch64-ceph-ubuntu20:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 ubuntu20 ceph container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:20.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' && \
               mkdir /root/debs/ubuntu20 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils && \
               curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - && \
               echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ focal main | tee /etc/apt/sources.list.d/ceph.list && \
               apt-get update && \
               /root/apt-download-without-version.sh 'ceph ceph-deploy ceph-mgr ceph-mds rbd-nbd rbd-mirror radosgw open-vm-tools' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               cd /root/debs/ubuntu20"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:aarch64-ceph20 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-ceph20

  build-branches-aarch64-ceph-ubuntu22:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 ubuntu22 ceph container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:22.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' && \
               mkdir /root/debs/ubuntu22 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils && \
               curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - && \
               echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ jammy main | tee /etc/apt/sources.list.d/ceph.list && \
               apt-get update && \
               /root/apt-download-without-version.sh 'open-vm-tools' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               cd /root/debs/ubuntu22"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:aarch64-ceph22 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-ceph22

  build-tags-aarch64-ceph-ubuntu20:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 ubuntu20 ceph container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:20.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' && \
               mkdir /root/debs/ubuntu20 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils && \
               curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - && \
               echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ focal main | tee /etc/apt/sources.list.d/ceph.list && \
               apt-get update && \
               /root/apt-download-without-version.sh 'ceph ceph-deploy ceph-mgr ceph-mds rbd-nbd rbd-mirror radosgw open-vm-tools' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               cd /root/debs/ubuntu20"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:aarch64-ceph20 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-ceph20

  build-tags-aarch64-ceph-ubuntu22:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 ubuntu22 ceph container image
          command: |
            sudo chmod +x ${PWD}/apt-download-without-version.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:22.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               apt-get update && \
               /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' && \
               mkdir /root/debs/ubuntu22 && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils && \
               curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - && \
               echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ jammy main | tee /etc/apt/sources.list.d/ceph.list && \
               apt-get update && \
               /root/apt-download-without-version.sh 'open-vm-tools' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               cd /root/debs/ubuntu22"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:aarch64-ceph22 .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-ceph22

  build-branches-aarch64-k8s-docker:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 k8s container image
          command: |
            docker run -itd --name=base20 wise2c/apt-source:aarch64-base20
            docker cp base20:/usr/share/nginx/html/debs base20
            docker stop base20 && docker rm base20
            docker run -itd --name=base22 wise2c/apt-source:aarch64-base22
            docker cp base22:/usr/share/nginx/html/debs base22
            docker stop base22 && docker rm base22
            docker run -itd --name=ceph20 wise2c/apt-source:aarch64-ceph20
            docker cp ceph20:/usr/share/nginx/html/debs ceph20
            docker stop ceph20 && docker rm ceph20
            docker run -itd --name=ceph22 wise2c/apt-source:aarch64-ceph22
            docker cp ceph22:/usr/share/nginx/html/debs ceph22
            docker stop ceph22 && docker rm ceph22
            mkdir -p ${PWD}/debs/ubuntu20
            mkdir -p ${PWD}/debs/ubuntu22
            mv base20/ubuntu20/*.deb ${PWD}/debs/ubuntu20/
            mv base22/ubuntu22/*.deb ${PWD}/debs/ubuntu22/
            mv ceph20/ubuntu20/*.deb ${PWD}/debs/ubuntu20/
            mv ceph22/ubuntu22/*.deb ${PWD}/debs/ubuntu22/
            sudo chmod +x ${PWD}/apt-download.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:20.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               echo 'apt-get updating...' && \
               apt-get update > build.log 2>&1 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 && \
               curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \
               add-apt-repository 'deb [arch=arm64] https://download.docker.com/linux/ubuntu focal stable' && \
               cp /root/kubernetes.list /etc/apt/sources.list.d/ && \
               apt-get update > build.log 2>&1 && \
               /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu.20.04~focal docker-ce=${DOCKER_VERSION}~ubuntu.20.04~focal kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               rm -f /root/debs/ubuntu20/docker.io*.deb && \
               cd /root/debs/ubuntu20 && \
               apt-get download libseccomp2 && \
               echo '##### list docker and kubernetes packages begin #####' && \
               ls | grep -E 'docker|kube' && \
               echo '##### list docker and kubernetes packages end #####' && \
               apt-ftparchive packages . > Packages && \
               apt-ftparchive release . > Release"
            docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:22.04 bash -c \
              "echo 'apt-get updating...' && \
               apt-get update > build.log 2>&1 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 && \
               curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg && \
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
               echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-jammy main" | tee /etc/apt/sources.list.d/kubernetes.list && \
               add-apt-repository 'deb [arch=arm64] https://download.docker.com/linux/ubuntu jammy stable' && \
               apt-get update > build.log 2>&1 && \
               /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu.22.04~jammy docker-ce=${DOCKER_VERSION}~ubuntu.22.04~jammy kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               rm -f /root/debs/ubuntu22/docker.io*.deb && \
               cd /root/debs/ubuntu22 && \
               apt-get download libseccomp2 libapt-pkg5.0 && \
               echo '##### list docker and kubernetes packages begin #####' && \
               ls | grep -E 'docker|kube' && \
               echo '##### list docker and kubernetes packages end #####' && \
               apt-ftparchive packages . > Packages && \
               apt-ftparchive release . > Release && \
               apt-get install -y gnupg gnupg2 > build.log 2>&1 && \
               echo wise2cbreeze > ./breeze.key && \
               cp /root/breeze ./ && \
               gpg2 --batch --gen-key breeze && \
               gpg2 --no-default-keyring --secret-keyring ./breeze.sec --keyring ./breeze.pub --list-secret-keys && \
               gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release && \
               gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release && \
               cd /root/debs/ubuntu20 && \
               cp ../ubuntu22/breeze.pub ./ && \
               cp ../ubuntu22/breeze.key ./ && \
               gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release && \
               gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release && \
               rm -f ../ubuntu22/breeze && \
               rm -f ../ubuntu22/breeze.key && \
               rm -f ./breeze && \
               rm -f ./breeze.key"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:aarch64-$CIRCLE_BRANCH .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-$CIRCLE_BRANCH

  build-tags-aarch64-k8s-docker:
    environment:
      CEPH_VERSION: '18.2.0'
      KUBE_VERSION: '1.25.14-00'
      DOCKER_VERSION: '5:24.0.6-1'
      OS22: 'xUbuntu_22.04'
      OS20: 'xUbuntu_20.04'
      K8S_VERSION: '1.25'
    resource_class: arm.medium
    machine: true
    steps:
      - checkout
      - run:
          name: Build an aarch64 k8s container image
          command: |
            docker run -itd --name=base20 wise2c/apt-source:aarch64-base20
            docker cp base20:/usr/share/nginx/html/debs base20
            docker stop base20 && docker rm base20
            docker run -itd --name=base22 wise2c/apt-source:aarch64-base22
            docker cp base22:/usr/share/nginx/html/debs base22
            docker stop base22 && docker rm base22
            docker run -itd --name=ceph20 wise2c/apt-source:aarch64-ceph20
            docker cp ceph20:/usr/share/nginx/html/debs ceph20
            docker stop ceph20 && docker rm ceph20
            docker run -itd --name=ceph22 wise2c/apt-source:aarch64-ceph22
            docker cp ceph22:/usr/share/nginx/html/debs ceph22
            docker stop ceph22 && docker rm ceph22
            mkdir -p ${PWD}/debs/ubuntu20
            mkdir -p ${PWD}/debs/ubuntu22
            mv base20/ubuntu20/*.deb ${PWD}/debs/ubuntu20/
            mv base22/ubuntu22/*.deb ${PWD}/debs/ubuntu22/
            mv ceph20/ubuntu20/*.deb ${PWD}/debs/ubuntu20/
            mv ceph22/ubuntu22/*.deb ${PWD}/debs/ubuntu22/
            sudo chmod +x ${PWD}/apt-download.sh
            docker run -t --rm -e DEBIAN_FRONTEND=noninteractive -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:20.04 bash -c \
              "rm -f /etc/apt/apt.conf.d/docker-clean && \
               echo 'apt-get updating...' && \
               apt-get update > build.log 2>&1 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 && \
               curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \
               add-apt-repository 'deb [arch=arm64] https://download.docker.com/linux/ubuntu focal stable' && \
               cp /root/kubernetes.list /etc/apt/sources.list.d/ && \
               apt-get update > build.log 2>&1 && \
               /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu.20.04~focal docker-ce=${DOCKER_VERSION}~ubuntu.20.04~focal kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu20 && \
               rm -f /root/debs/ubuntu20/docker.io*.deb && \
               cd /root/debs/ubuntu20 && \
               apt-get download libseccomp2 && \
               echo '##### list docker and kubernetes packages begin #####' && \
               ls | grep -E 'docker|kube' && \
               echo '##### list docker and kubernetes packages end #####' && \
               apt-ftparchive packages . > Packages && \
               apt-ftparchive release . > Release"
            docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:22.04 bash -c \
              "echo 'apt-get updating...' && \
               apt-get update > build.log 2>&1 && \
               apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 && \
               curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg && \
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
               echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-jammy main" | tee /etc/apt/sources.list.d/kubernetes.list && \
               add-apt-repository 'deb [arch=arm64] https://download.docker.com/linux/ubuntu jammy stable' && \
               apt-get update > build.log 2>&1 && \
               /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu.22.04~jammy docker-ce=${DOCKER_VERSION}~ubuntu.22.04~jammy kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' && \
               mv /tmp/debs/*.deb /root/debs/ubuntu22 && \
               rm -f /root/debs/ubuntu22/docker.io*.deb && \
               cd /root/debs/ubuntu22 && \
               apt-get download libseccomp2 libapt-pkg5.0 && \
               echo '##### list docker and kubernetes packages begin #####' && \
               ls | grep -E 'docker|kube' && \
               echo '##### list docker and kubernetes packages end #####' && \
               apt-ftparchive packages . > Packages && \
               apt-ftparchive release . > Release && \
               apt-get install -y gnupg gnupg2 > build.log 2>&1 && \
               echo wise2cbreeze > ./breeze.key && \
               cp /root/breeze ./ && \
               gpg2 --batch --gen-key breeze && \
               gpg2 --no-default-keyring --secret-keyring ./breeze.sec --keyring ./breeze.pub --list-secret-keys && \
               gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release && \
               gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release && \
               cd /root/debs/ubuntu20 && \
               cp ../ubuntu22/breeze.pub ./ && \
               cp ../ubuntu22/breeze.key ./ && \
               gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release && \
               gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release && \
               rm -f ../ubuntu22/breeze && \
               rm -f ../ubuntu22/breeze.key && \
               rm -f ./breeze && \
               rm -f ./breeze.key"
            sudo chmod -R 755 ${PWD}/debs
            docker build -t wise2c/apt-source:aarch64-$CIRCLE_TAG .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push wise2c/apt-source:aarch64-$CIRCLE_TAG

  build-branches-multi-arch:
    machine: true
    steps:
      - run:
          name: Build a multi-arch container image
          command: |
            docker manifest create wise2c/apt-source:$CIRCLE_BRANCH wise2c/apt-source:amd64-$CIRCLE_BRANCH wise2c/apt-source:aarch64-$CIRCLE_BRANCH
            docker manifest annotate wise2c/apt-source:$CIRCLE_BRANCH wise2c/apt-source:amd64-$CIRCLE_BRANCH --os linux --arch amd64
            docker manifest annotate wise2c/apt-source:$CIRCLE_BRANCH wise2c/apt-source:aarch64-$CIRCLE_BRANCH --os linux --arch arm64
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker manifest push wise2c/apt-source:$CIRCLE_BRANCH
  build-tags-multi-arch:
    machine: true
    steps:
      - run:
          name: Build a multi-arch container image
          command: |
            docker manifest create wise2c/apt-source:$CIRCLE_TAG wise2c/apt-source:amd64-$CIRCLE_TAG wise2c/apt-source:aarch64-$CIRCLE_TAG
            docker manifest annotate wise2c/apt-source:$CIRCLE_TAG wise2c/apt-source:amd64-$CIRCLE_TAG --os linux --arch amd64
            docker manifest annotate wise2c/apt-source:$CIRCLE_TAG wise2c/apt-source:aarch64-$CIRCLE_TAG --os linux --arch arm64
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker manifest push wise2c/apt-source:$CIRCLE_TAG

workflows:
  version: 2
  build-for-branches:
    jobs:
      - build-branches-amd64-base-ubuntu20
      - build-branches-amd64-base-ubuntu22
      - build-branches-amd64-ceph-ubuntu20
      - build-branches-amd64-ceph-ubuntu22
      - build-branches-amd64-k8s-docker:
          requires:
            - build-branches-amd64-base-ubuntu20
            - build-branches-amd64-base-ubuntu22
            - build-branches-amd64-ceph-ubuntu20
            - build-branches-amd64-ceph-ubuntu22

      - build-branches-aarch64-base-ubuntu20
      - build-branches-aarch64-base-ubuntu22
      - build-branches-aarch64-ceph-ubuntu20
      - build-branches-aarch64-ceph-ubuntu22
      - build-branches-aarch64-k8s-docker:
          requires:
            - build-branches-aarch64-base-ubuntu20
            - build-branches-aarch64-base-ubuntu22
            - build-branches-aarch64-ceph-ubuntu20
            - build-branches-aarch64-ceph-ubuntu22

      - build-branches-multi-arch:
          requires:
            - build-branches-amd64-k8s-docker
            - build-branches-aarch64-k8s-docker

  build-for-tags:
    jobs:
      - build-tags-amd64-base-ubuntu20:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-tags-amd64-base-ubuntu22:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-tags-amd64-ceph-ubuntu20:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-tags-amd64-ceph-ubuntu22:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-tags-amd64-k8s-docker:
          requires:
            - build-tags-amd64-base-ubuntu20
            - build-tags-amd64-base-ubuntu22
            - build-tags-amd64-ceph-ubuntu20
            - build-tags-amd64-ceph-ubuntu22
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - build-tags-aarch64-base-ubuntu20:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-tags-aarch64-base-ubuntu22:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-tags-aarch64-ceph-ubuntu20:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-tags-aarch64-ceph-ubuntu22:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-tags-aarch64-k8s-docker:
          requires:
            - build-tags-aarch64-base-ubuntu20
            - build-tags-aarch64-base-ubuntu22
            - build-tags-aarch64-ceph-ubuntu20
            - build-tags-aarch64-ceph-ubuntu22
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - build-tags-multi-arch:
          requires:
            - build-tags-amd64-k8s-docker
            - build-tags-aarch64-k8s-docker
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
