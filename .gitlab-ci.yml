stages:
  - build
  - deploy

variables:
  CEPH_VERSION: 'octopus'
  KUBE_VERSION: '1.20.1-00'
  DOCKER_VERSION: '5:19.03.13~3-0'

#base_ubuntu16:
#  image: docker:git
#  services:
#    - docker:dind
#  stage: build
#  when: always
#  script:
#      - chmod +x ${PWD}/apt-download-without-version.sh
#      - >
#        docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:16.04 bash -c
#        "apt-get update &&
#         /root/apt-download-without-version.sh 'python python-docker python-chardet python-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset' &&
#         apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils &&
#         mkdir /root/debs/ubuntu16 &&
#         mv /tmp/debs/*.deb /root/debs/ubuntu16"
#      - docker build -t wise2c/apt-source:base16 .
#      - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
#      - docker push wise2c/apt-source:base16

base_ubuntu18:
  image: docker:git
  services:
    - docker:dind
  stage: build
  when: always
  script:
    - chmod +x ${PWD}/apt-download-without-version.sh
    - >
      docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:18.04 bash -c
      "apt-get update &&
       /root/apt-download-without-version.sh 'python python-docker python-chardet python-requests docker-compose chrony jq ipvsadm graphviz nfs-common gnupg gnupg2 ipset' &&
       apt-get update && apt-get install -y apt-transport-https curl software-properties-common apt-utils &&
       mkdir /root/debs/ubuntu18 &&
       mv /tmp/debs/*.deb /root/debs/ubuntu18 &&
       cd /root/debs/ubuntu18"
    - docker build -t wise2c/apt-source:base18 .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push wise2c/apt-source:base18

#ceph_ubuntu16:
#  image: docker:git
#  services:
#    - docker:dind
#  stage: build
#  when: always
#  script:
#    - chmod +x ${PWD}/apt-download-without-version.sh
#    - >
#      docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:16.04 bash -c
#      "apt-get update &&
#       /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' &&
#       mkdir /root/debs/ubuntu16 &&
#       mv /tmp/debs/*.deb /root/debs/ubuntu16 &&
#       apt-get install -y apt-transport-https curl software-properties-common apt-utils &&
#       curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - &&
#       echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ xenial main | tee /etc/apt/sources.list.d/ceph.list &&
#       apt-get update &&
#       /root/apt-download-without-version.sh 'ceph ceph-deploy ceph-mgr ceph-mds rbd-nbd rbd-mirror radosgw radosgw-agent open-vm-tools' &&
#       mv /tmp/debs/*.deb /root/debs/ubuntu16 &&
#       cd /root/debs/ubuntu16"
#    - chmod -R 755 ${PWD}/debs
#    - docker build -t wise2c/apt-source:ceph16 .
#    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
#    - docker push wise2c/apt-source:ceph16

ceph_ubuntu18:
  image: docker:git
  services:
    - docker:dind
  stage: build
  when: always
  script:
    - chmod +x ${PWD}/apt-download-without-version.sh
    - >
      docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/apt-download-without-version.sh:/root/apt-download-without-version.sh ubuntu:18.04 bash -c
      "apt-get update &&
       /root/apt-download-without-version.sh 'apt-transport-https curl software-properties-common apt-utils' &&
       mkdir /root/debs/ubuntu18 &&
       mv /tmp/debs/*.deb /root/debs/ubuntu18 &&
       apt-get install -y apt-transport-https curl software-properties-common apt-utils &&
       curl -fsSL https://download.ceph.com/keys/release.asc | apt-key add - &&
       echo deb https://download.ceph.com/debian-${CEPH_VERSION}/ bionic main | tee /etc/apt/sources.list.d/ceph.list &&
       apt-get update &&
       /root/apt-download-without-version.sh 'ceph ceph-deploy ceph-mgr ceph-mds rbd-nbd rbd-mirror radosgw radosgw-agent open-vm-tools' &&
       mv /tmp/debs/*.deb /root/debs/ubuntu18"
    - chmod -R 755 ${PWD}/debs
    - docker build -t wise2c/apt-source:ceph18 .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push wise2c/apt-source:ceph18

docker_k8s:
  image: docker:git
  services:
    - docker:dind
  stage: deploy
  when: always
  script:
 #   - docker run -itd --name=base16 wise2c/apt-source:base16
 #   - docker cp base16:/usr/share/nginx/html/debs base16
 #   - docker stop base16 && docker rm base16
    - docker run -itd --name=base18 wise2c/apt-source:base18
    - docker cp base18:/usr/share/nginx/html/debs base18
    - docker stop base18 && docker rm base18
#    - docker run -itd --name=ceph16 wise2c/apt-source:ceph16
#    - docker cp ceph16:/usr/share/nginx/html/debs ceph16
#    - docker stop ceph16 && docker rm ceph16
    - docker run -itd --name=ceph18 wise2c/apt-source:ceph18
    - docker cp ceph18:/usr/share/nginx/html/debs ceph18
    - docker stop ceph18 && docker rm ceph18
#    - mkdir -p ${PWD}/debs/ubuntu16
    - mkdir -p ${PWD}/debs/ubuntu18
#    - mv base16/ubuntu16/*.deb ${PWD}/debs/ubuntu16/
    - mv base18/ubuntu18/*.deb ${PWD}/debs/ubuntu18/
#    - mv ceph16/ubuntu16/*.deb ${PWD}/debs/ubuntu16/
    - mv ceph18/ubuntu18/*.deb ${PWD}/debs/ubuntu18/
    - chmod +x ${PWD}/apt-download.sh
#    - >
#      docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:16.04 bash -c
#      "echo 'apt-get updating...' &&
#       apt-get update > build.log 2>&1 &&
#       apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 &&
#       curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - &&
#       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &&
#       add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable' &&
#       cp /root/kubernetes.list /etc/apt/sources.list.d/ &&
#       apt-get update > build.log 2>&1 &&
#       /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu-xenial docker-ce=${DOCKER_VERSION}~ubuntu-xenial kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' &&
#       mv /tmp/debs/*.deb /root/debs/ubuntu16 &&
#       rm -f /root/debs/ubuntu16/docker.io*.deb &&
#       cd /root/debs/ubuntu16 &&
#       apt-get download libseccomp2 libapt-pkg5.0 &&
#       echo '##### list docker and kubernetes packages begin #####' &&
#       ls | grep -E 'docker|kube' &&
#       echo '##### list docker and kubernetes packages end #####' &&
#       apt-ftparchive packages . > Packages &&
#       apt-ftparchive release . > Release"
    - >
      docker run -t --rm -v ${PWD}/debs:/root/debs -v ${PWD}/kubernetes.list:/root/kubernetes.list -v ${PWD}/apt-download.sh:/root/apt-download.sh -v ${PWD}/breeze-keygen.txt:/root/breeze ubuntu:18.04 bash -c
      "echo 'apt-get updating...' &&
       apt-get update > build.log 2>&1 &&
       apt-get install -y apt-transport-https curl software-properties-common apt-utils > build.log 2>&1 &&
       curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - &&
       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &&
       add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable' &&
       cp /root/kubernetes.list /etc/apt/sources.list.d/ &&
       apt-get update > build.log 2>&1 &&
       /root/apt-download.sh 'python-apt docker-ce-cli=${DOCKER_VERSION}~ubuntu-bionic docker-ce=${DOCKER_VERSION}~ubuntu-bionic kubelet=${KUBE_VERSION} kubectl=${KUBE_VERSION} kubeadm=${KUBE_VERSION}' &&
       mv /tmp/debs/*.deb /root/debs/ubuntu18 &&
       rm -f /root/debs/ubuntu18/docker.io*.deb &&
       cd /root/debs/ubuntu18 &&
       apt-get download libseccomp2 libapt-pkg5.0 &&
       echo '##### list docker and kubernetes packages begin #####' &&
       ls | grep -E 'docker|kube' &&
       echo '##### list docker and kubernetes packages end #####' &&
       apt-ftparchive packages . > Packages &&
       apt-ftparchive release . > Release &&
       apt-get install -y gnupg gnupg2 > build.log 2>&1 &&
       echo wise2cbreeze > ./breeze.key &&
       cp /root/breeze ./ &&
       gpg2 --batch --gen-key breeze &&
       gpg2 --no-default-keyring --secret-keyring ./breeze.sec --keyring ./breeze.pub --list-secret-keys &&
       gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release &&
       gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release &&
       cd /root/debs/ubuntu16 &&
       cp ../ubuntu18/breeze.pub ./ &&
       cp ../ubuntu18/breeze.key ./ &&
       gpg2 --pinentry-mode loopback --passphrase-file=./breeze.key --keyring ./breeze.pub --clearsign -o InRelease Release &&
       gpg2 -abs --keyring ./breeze.pub -o Release.gpg Release &&
       rm -f ../ubuntu18/breeze &&
       rm -f ../ubuntu18/breeze.key &&
       rm -f ./breeze &&
       rm -f ./breeze.key"
    - chmod -R 755 ${PWD}/debs
    - docker build -t wise2c/apt-source:$CI_COMMIT_REF_NAME .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push wise2c/apt-source:$CI_COMMIT_REF_NAME
